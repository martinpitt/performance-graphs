#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import re
import sys
import time
import datetime

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


def getMaximumSpike(browser, g_type, saturation, hour, minute):
    sel = "#metrics-hour-{0} div.metrics-data-{1}[style='--metrics-minute:{2};'] polygon".format(hour, g_type, minute)
    if saturation:
        sel += ":nth-child(2)"
    else:
        sel += ":first-child"

    points = browser.attr(sel, "points")
    assert "NaN" not in points, points
    xs = [float(x.split(",")[0]) for x in points.split()]

    return max(xs)


def prepareArchive(machine, name, time):
    machine.upload(["archives/{0}".format(name)], "/tmp/")
    machine.execute("""timedatectl set-ntp off
                       systemctl stop pmlogger
                       rm -rf /var/log/pcp/pmlogger/*
                       tar -C / -xzvf /tmp/{0}
                       timedatectl set-time @{1}""".format(name, time))


class TestApplication(testlib.MachineCase):


    def testBasic(self):
        b = self.browser
        m = self.machine

        m.execute("systemctl start pmlogger")

        self.login_and_go("/performance-graphs")
        # eventually finishes data loading and shows heading
        b.wait_in_text(".metrics-history", "Events")
        b.wait_in_text(".metrics-history", "CPU")
        b.wait_present(".metrics-hour .metrics-data-cpu")

        # only shows current hour
        b.wait_js_func("ph_count_check", ".metrics-hour", 1)

        # VM just started, we don't have 12 hours of data
        b.wait_in_text(".metrics .pf-c-alert", "No data available between")
        # initial data gap is < 24 hours, does not show date
        year = m.execute("date +%Y").strip()
        self.assertNotIn(year, b.text(".metrics .pf-c-alert"))

        # can try to load earlier data; only updates "no data" alert as there is no data
        b.wait_text(".bottom-panel button", "Load earlier data")
        b.click(".bottom-panel button")
        # now the gap is > 24 hours, does show date
        b.wait_in_text(".metrics .pf-c-alert", year)
        # still only one hour
        b.wait_js_func("ph_count_check", ".metrics-hour", 1)

        # should only have at most three valid minutes, the rest should be empty
        valid_start = b.call_js_func("ph_count", ".metrics-data-cpu.valid-data")
        self.assertLessEqual(valid_start, 3)
        # leave one minute wiggle room, in case the page updates between these two checks
        self.assertGreaterEqual(b.call_js_func("ph_count", ".metrics-data-cpu.empty-data"), 59 - valid_start)
        # page auto-updates every minute
        with b.wait_timeout(90):
            b.wait_js_func("(exp => ph_count('.metrics-data-cpu.valid-data') == exp)", valid_start + 1)

        # there are often some initial events at machine startup
        initial_events = b.call_js_func("ph_count", ".metrics-events")

        # memory saturation event
        now = datetime.datetime.now()
        minute_start = now.minute
        hour_start = int(datetime.datetime.timestamp(now.replace(minute=0, second=0))) * 1000

        mem_hog = m.spawn("MEMBLOB=$(yes | dd bs=1M count=500 iflag=fullblock); sleep infinity", "mem_hog.log")
        time.sleep(30)
        m.execute("kill %d" % mem_hog)

        now = datetime.datetime.now()
        minute_end = now.minute
        hour_end = int(datetime.datetime.timestamp(now.replace(minute=0, second=0))) * 1000

        # UI auto-updates every minute, so it should pick up the new spike (and possibly other events) within the next 30s
        b.wait_js_func("(exp => ph_count('.metrics-events') >= exp)", initial_events + 1)

        # We cannot just wait for spike, as we are not sure, in which minute it actually is (it
        # might be in the starting minute or in the ending one).
        # Thus just get maximum spike from both, pick the bigger and assert it is what we expect
        start_spike = getMaximumSpike(b, "memory", True, hour_start, minute_start)
        end_spike = getMaximumSpike(b, "memory", True, hour_end, minute_end)
        spike = max(start_spike, end_spike)
        self.assertGreaterEqual(spike, 0.9)

        # in our CI this ends up as a net swap event, and no actual used memory increase
        b.wait_in_text(".metrics-events:last-of-type", "Swap")

    def testEvents(self):
        b = self.browser
        m = self.machine

        def events_at(hour, minute):
            return b.text("#metrics-hour-{0} .metrics-events[style='--metrics-minute:{1};']".format(hour, minute))

        #
        # Disks
        #

        m.execute('swapoff --all; while [ -n "$(swapon --show)" ]; do sleep 1; done')

        prepareArchive(m, "disk.tar.gz", 1597672800)

        self.login_and_go("/performance-graphs")
        # eventually finishes data loading and shows heading
        b.wait_in_text(".metrics-history", "Events")
        b.wait_in_text(".metrics-history", "CPU")
        b.wait_present(".metrics-hour .metrics-data-cpu")

        # Big spike lasting 3 minutes
        self.assertGreaterEqual(getMaximumSpike(b, "disks", False, 1597662000000, 25), 0.9)
        self.assertGreaterEqual(getMaximumSpike(b, "disks", False, 1597662000000, 26), 0.9)
        self.assertGreaterEqual(getMaximumSpike(b, "disks", False, 1597662000000, 27), 0.9)

        # Smaller spike lasting 2 minutes
        self.assertGreaterEqual(getMaximumSpike(b, "disks", False, 1597662000000, 28), 0.4)
        self.assertLessEqual(getMaximumSpike(b, "disks", False, 1597662000000, 28), 0.6)
        self.assertGreaterEqual(getMaximumSpike(b, "disks", False, 1597662000000, 29), 0.4)
        # recognized as event
        self.assertIn("Disk I/O spike", events_at(1597662000000, 28))

        # No visible activity after that
        self.assertLessEqual(getMaximumSpike(b, "disks", False, 1597662000000, 30), 0.01)

        # swap usage is not shown if there is no swap
        b.wait_present("#current-memory-usage")
        self.assertFalse(b.is_present("#current-swap-usage"))
        b.logout()

        #
        # Network and CPU
        #

        prepareArchive(m, "cpu_network.tar.gz", 1598918400)

        self.login_and_go("/performance-graphs")
        # eventually finishes data loading and shows heading
        b.wait_in_text(".metrics-history", "Events")
        b.wait_in_text(".metrics-history", "CPU")
        b.wait_present(".metrics-hour .metrics-data-cpu")

        # Test network - Big spike lasting 2 minutes
        self.assertGreaterEqual(getMaximumSpike(b, "network", False, 1598950800000, 3), 0.5)
        self.assertGreaterEqual(getMaximumSpike(b, "network", False, 1598950800000, 4), 0.5)
        # recognized as event
        self.assertIn("Network I/O spike", events_at(1598950800000, 3))
        # but it's not a new event in minute 4
        self.assertNotIn("Network I/O spike", events_at(1598950800000, 4))

        # Followed by smaller spike
        self.assertGreaterEqual(getMaximumSpike(b, "network", False, 1598950800000, 5), 0.35)
        self.assertLessEqual(getMaximumSpike(b, "network", False, 1598950800000, 5), 0.5)
        # still not a new spike
        self.assertNotIn("Network I/O spike", events_at(1598950800000, 5))

        # Followed by virtually no data
        self.assertLessEqual(getMaximumSpike(b, "network", False, 1598950800000, 6), 0.01)

        # Test CPU load - big - small - big spikes
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", False, 1598950800000, 3), 0.9)
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", False, 1598950800000, 4), 0.5)
        self.assertLessEqual(getMaximumSpike(b, "cpu", False, 1598950800000, 4), 0.55)
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", False, 1598950800000, 5), 0.9)
        self.assertIn("CPU spike", events_at(1598950800000, 2))
        self.assertIn("CPU spike", events_at(1598950800000, 5))

        # Test CPU saturation - 3 spikes, each 2 minutes (medium, big, small)
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 3), 0.5)
        self.assertLessEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 3), 0.6)
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 4), 0.5)
        self.assertLessEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 4), 0.6)

        self.assertGreaterEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 5), 0.8)
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 6), 0.8)

        self.assertGreaterEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 7), 0.3)
        self.assertLessEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 7), 0.4)
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 8), 0.3)
        self.assertLessEqual(getMaximumSpike(b, "cpu", True, 1598950800000, 8), 0.4)

        self.assertNotIn("Load spike", events_at(1598950800000, 2))
        self.assertIn("Load spike", events_at(1598950800000, 3))
        self.assertNotIn("Load spike", events_at(1598950800000, 4))
        self.assertIn("Load spike", events_at(1598950800000, 5))

    @testlib.nondestructive
    def testNoData(self):
        b = self.browser
        m = self.machine

        m.execute("systemctl stop pmlogger && mount -t tmpfs tmpfs /var/log/pcp/pmlogger")
        self.addCleanup(m.execute, "umount /var/log/pcp/pmlogger")

        self.login_and_go("/performance-graphs")

        b.wait_in_text(".pf-c-empty-state", "Metrics history could not be loaded")
        # Troubleshoot
        b.click(".pf-c-empty-state button.pf-m-link")
        b.enter_page("/system/services")
        b.wait_in_text("#service-details", "pmlogger.service")

    @testlib.nondestructive
    def testNoCockpitPcp(self):
        b = self.browser
        m = self.machine

        m.execute("mount -t tmpfs tmpfs /usr/share/cockpit/pcp")
        self.addCleanup(m.execute, "umount /usr/share/cockpit/pcp")

        self.login_and_go("/performance-graphs")
        b.wait_in_text(".pf-c-empty-state", "cockpit-pcp is missing")
        b.click(".pf-c-empty-state button.pf-m-primary")
        # this button does not yet do anything

    @testlib.nondestructive
    def testCurrentMetrics(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/performance-graphs")

        def progressValue(progress_bar_sel):
            sel = progress_bar_sel + " .pf-c-progress__indicator"
            b.wait_present(sel)
            b.wait_attr_contains(sel, "style", "width:")
            style = b.attr(sel, "style")
            m = re.search("width: (\d+)%;", style)
            return int(m.group(1))

        def topServiceValue(aria_label, col_label, row):
            sel = "table[aria-label='%s'] tbody tr:nth-of-type(%d) td[data-label='%s']" % (aria_label, row, col_label)
            # split off unit, like "12 MB"
            return float(b.text(sel).split(' ')[0])

        # CPU

        nproc = m.execute("nproc").strip()
        b.wait_in_text("#current-cpu-usage", nproc + " CPU")
        # make sure to clean up our test resource consumers on failures
        self.addCleanup(m.execute, "systemctl stop cockpittest.slice 2>/dev/null || true")
        # wait until system settles down
        b.wait(lambda: progressValue("#current-cpu-usage") < 20)
        m.execute("systemd-run --slice cockpittest -p CPUQuota=60% --unit cpu-hog dd if=/dev/urandom of=/dev/null")
        m.execute("systemd-run --slice cockpittest -p CPUQuota=30% --unit cpu-piglet dd if=/dev/urandom of=/dev/null")
        b.wait(lambda: progressValue("#current-cpu-usage") > 75)
        # no other process in the test VM should take > 30% CPU, by the "settles down" assertion above
        b.wait_text("table[aria-label='Top 5 CPU services'] tbody tr:nth-of-type(1) td[data-label='Service']", "cpu-hog")
        b.wait_text("table[aria-label='Top 5 CPU services'] tbody tr:nth-of-type(2) td[data-label='Service']", "cpu-piglet")
        b.wait(lambda: topServiceValue("Top 5 CPU services", "%", 1) > 50)
        b.wait(lambda: topServiceValue("Top 5 CPU services", "%", 1) < 70)
        b.wait(lambda: topServiceValue("Top 5 CPU services", "%", 2) > 20)
        b.wait(lambda: topServiceValue("Top 5 CPU services", "%", 2) < 40)

        m.execute("systemctl stop cpu-hog cpu-piglet")
        # should go back to idle usage
        b.wait(lambda: progressValue("#current-cpu-usage") < 20)
        b.wait_not_in_text("table[aria-label='Top 5 CPU services'] tbody", "cpu-hog")
        b.wait_not_in_text("table[aria-label='Top 5 CPU services'] tbody", "cpu-piglet")

        # Load looks like "1 min: 1.41, 5 min: 1.47, 15 min: 2.30"
        b.wait(lambda: float(b.text("#load-avg").split()[2].rstrip(',')) < 5)
        m.execute("systemd-run --slice cockpittest --unit load-hog sh -ec "
                  "  'for i in `seq 500`; do dd if=/dev/urandom of=/dev/zero bs=10K count=500 status=none & done'")
        b.wait(lambda: float(b.text("#load-avg").split()[2].rstrip(',')) > 15)
        # ok to fail, as the command exits by itself
        m.execute("systemctl stop load-hog 2>/dev/null || true")
        # this settles down slowly, don't wait for becoming really quiet
        with b.wait_timeout(180):
            b.wait(lambda: float(b.text("#load-avg").split()[2].rstrip(',')) < 10)

        # Memory

        # our test machines have ~ 1 GiB of memory, a reasonable chunk of it should be used
        b.wait_in_text("#current-memory-usage", " GiB")
        initial_usage = progressValue("#current-memory-usage")
        self.assertGreater(initial_usage, 10)
        self.assertLess(initial_usage, 80)
        # allocate an extra 300 MB; this may cause other stuff to get unmapped,
        # thus not exact addition, but usage should go up
        m.execute("systemd-run --slice cockpittest --unit mem-hog sh -ec 'MEMBLOB=$(yes | dd bs=1M count=300 iflag=fullblock); touch /tmp/hogged; sleep infinity'")
        m.execute("while [ ! -e /tmp/hogged ]; do sleep 1; done")
        # bars update every 3s
        time.sleep(8)
        hog_usage = progressValue("#current-memory-usage")
        self.assertGreater(hog_usage, initial_usage + 8)

        b.wait_text("table[aria-label='Top 5 memory services'] tbody tr:nth-of-type(1) td[data-label='Service']", "mem-hog")
        b.wait(lambda: topServiceValue("Top 5 memory services", "Used", 1) > 300)
        b.wait(lambda: topServiceValue("Top 5 memory services", "Used", 1) < 350)

        # table entries are links to Services page
        b.click("table[aria-label='Top 5 memory services'] tbody tr:nth-of-type(1) td[data-label='Service'] a span")
        b.enter_page("/system/services")
        b.wait_in_text("#path", "/mem-hog.service")
        b.wait_in_text(".service-name", "MEMBLOB=")

        b.go("/performance-graphs")
        b.enter_page("/performance-graphs")
        b.wait_present("table[aria-label='Top 5 memory services']")

        # use even more memory to trigger swap
        m.execute("systemd-run --slice cockpittest --unit mem-hog2 sh -ec 'MEMBLOB=$(yes | dd bs=1M count=300 iflag=fullblock); sleep infinity'")
        b.wait(lambda: progressValue("#current-swap-usage") > 0)

        m.execute("systemctl stop mem-hog mem-hog2")

        # should go back to initial_usage; often below, due to paged out stuff
        b.wait(lambda: progressValue("#current-memory-usage") <= initial_usage)
        self.assertGreater(progressValue("#current-memory-usage"), 10)
        b.wait_not_in_text("table[aria-label='Top 5 memory services'] tbody", "mem-hog")

        # Disk I/O

        # test env should be quiet enough to not transmit MB/s
        b.wait(lambda: re.match(r'^[0-9.]+ (KiB|B)/s$', b.text("#current-disks-read")))
        b.wait(lambda: re.match(r'^[0-9.]+ (KiB|B)/s$', b.text("#current-disks-write")))
        # reading lots of data
        m.execute("systemd-run --slice cockpittest --unit disk-read-hog sh -ec 'grep -r . /usr >/dev/null'")
        b.wait(lambda: re.match(r'^[0-9.]+ (MiB|GiB)/s$', b.text("#current-disks-read")))
        b.wait(lambda: re.match(r'^[0-9.]+ (KiB|B)/s$', b.text("#current-disks-write")))  # this should stay calm
        m.execute("systemctl stop disk-read-hog")
        b.wait(lambda: re.match(r'^[0-9.]+ (KiB|B)/s$', b.text("#current-disks-read")))  # back to quiet
        # writing lots of data
        m.execute("systemd-run --slice cockpittest --unit disk-write-hog sh -ec "
                  " 'while true; do dd if=/dev/zero of=/var/tmp/blob bs=1M count=100; done'")
        self.addCleanup(self.machine.execute, "rm -f /var/tmp/blob")
        b.wait(lambda: re.match(r'^[0-9.]+ (MiB|GiB)/s$', b.text("#current-disks-write")))
        b.wait(lambda: re.match(r'^[0-9.]+ (KiB|B)/s$', b.text("#current-disks-read")))  # this should stay calm
        m.execute("systemctl stop disk-write-hog")
        b.wait(lambda: re.match(r'^[0-9.]+ (KiB|B)/s$', b.text("#current-disks-write")))

        # Disk usage

        # add 50 MB loopback disk
        m.execute("""set -e
                  F=$(mktemp /var/tmp/loop.XXXX)
                  dd if=/dev/zero of=$F bs=1M count=50
                  mkfs -t ext3 $F
                  mkdir -p /var/cockpittest
                  mount -o loop $F /var/cockpittest
                  rm $F
                  """)
        self.addCleanup(self.machine.execute, "umount /var/cockpittest")
        self.assertLess(progressValue(".pf-c-progress[data-disk-usage-target='/var/cockpittest']"), 5)
        free = b.text(".pf-c-progress[data-disk-usage-target='/var/cockpittest'] .pf-c-progress__status")
        # anything between 40 and 50 MB
        self.assertRegex(free, "^4\d\.\d MB free / 4\d\.\d MB total$")

        m.execute("dd if=/dev/zero of=/var/cockpittest/blob bs=1M count=40")
        b.wait(lambda: progressValue(".pf-c-progress[data-disk-usage-target='/var/cockpittest']") >= 90)

        # Network usage

        # has expected interfaces
        b.wait_in_text("[aria-label='Network usage'] [data-interface='virbr0']", "virbr0")
        b.wait_in_text("[aria-label='Network usage'] [data-interface='lo']", "lo")

        def rateMatches(label, regexp):
            text = b.text("[aria-label='Network usage'] [data-interface='lo'] td[data-label='%s']" % label)
            return re.match(regexp, text) is not None

        # loopback is quiet enough to not transmit MB/s
        b.wait(lambda: rateMatches("In", r'^[0-9.]+ (KiB|B)/s$'))
        b.wait(lambda: rateMatches("Out", r'^[0-9.]+ (KiB|B)/s$'))
        # pipe lots of data through lo
        m.execute("systemd-run --slice cockpittest --unit lo-hog sh -ec "
                  " 'nc -l 2000 > /dev/null & nc localhost 2000 </dev/zero'")
        b.wait(lambda: rateMatches("In", r'^[0-9.]+ (MiB|GiB)/s$'))
        b.wait(lambda: rateMatches("Out", r'^[0-9.]+ (MiB|GiB)/s$'))
        m.execute("systemctl stop lo-hog")


class TestMultiCPU(testlib.MachineCase):

    provision = {
        "0": {"cpus": 2}
    }

    def testCPUUsage(self):
        b = self.browser
        m = self.machine

        prepareArchive(m, "2corescpu.tar.gz", 1598971635)
        self.login_and_go("/performance-graphs")

        # one core is busy, the other idle -- that should be 50% total usage systemctl stop pmlogger
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", False, 1598968800000, 44), 0.2)
        self.assertLessEqual(getMaximumSpike(b, "cpu", False, 1598968800000, 44), 0.55)

        # next minute, both cores are busy
        self.assertGreaterEqual(getMaximumSpike(b, "cpu", False, 1598968800000, 45), 0.5)
        self.assertLessEqual(getMaximumSpike(b, "cpu", False, 1598968800000, 45), 1.0)


if __name__ == '__main__':
    testlib.test_main()
